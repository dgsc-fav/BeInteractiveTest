package com.github.dgsc_fav.beinteractivetest.provider;


import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteOpenHelper;
import android.net.Uri;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.github.dgsc_fav.beinteractivetest.db.DbOpenHelper;
import com.github.dgsc_fav.beinteractivetest.db.entity.CityEntity;
import com.github.dgsc_fav.beinteractivetest.db.entity.CityEntitySQLiteTypeMapping;
import com.github.dgsc_fav.beinteractivetest.db.entity.CurrentWeatherEntity;
import com.github.dgsc_fav.beinteractivetest.db.entity.CurrentWeatherEntitySQLiteTypeMapping;
import com.github.dgsc_fav.beinteractivetest.db.entity.DailyWeatherEntity;
import com.github.dgsc_fav.beinteractivetest.db.entity.DailyWeatherEntitySQLiteTypeMapping;
import com.github.dgsc_fav.beinteractivetest.db.table.CitiesTable;
import com.github.dgsc_fav.beinteractivetest.db.table.CurrentWeatherTable;
import com.github.dgsc_fav.beinteractivetest.db.table.DailyWeatherTable;
import com.pushtorefresh.storio.sqlite.StorIOSQLite;
import com.pushtorefresh.storio.sqlite.impl.DefaultStorIOSQLite;

/**
 * Provider для работы с sqlite db
 * Created by DG on 23.10.2016.
 */

public class DbContentProvider extends ContentProvider {
    /**
     * Константы для {@link DbContentProvider}
     * Created by DG on 23.10.2016.
     */

    interface DbContract {
        String PATH_CITIES = CitiesTable.TABLE;
        int URI_MATCHER_CODE_CITIES = 1;
        String PATH_CURRENT_WEATHER = "cweather";
        int URI_MATCHER_CODE_CURRENT_WEATHER = 2;
        String PATH_DAILY_WEATHER = "dweather";
        int URI_MATCHER_CODE_DAILY_WEATHER = 3;
    }

    @NonNull
    public static final String AUTHORITY =
            "com.github.dgsc_fav.beinteractivetest.provider.db_content_provider";

    private static final UriMatcher URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);

    static {
        URI_MATCHER.addURI(AUTHORITY, DbContract.PATH_CITIES, DbContract.URI_MATCHER_CODE_CITIES);
        URI_MATCHER.addURI(AUTHORITY, DbContract.PATH_CURRENT_WEATHER,
                DbContract.URI_MATCHER_CODE_CURRENT_WEATHER);
        URI_MATCHER.addURI(AUTHORITY, DbContract.PATH_DAILY_WEATHER,
                DbContract.URI_MATCHER_CODE_DAILY_WEATHER);
    }


    private static SQLiteOpenHelper sSQLiteOpenHelper;
    private static StorIOSQLite sStorIOSQLite;

    @Override
    public boolean onCreate() {
        sSQLiteOpenHelper = new DbOpenHelper(getContext());
        // такая инитка, потому что не используем DI
        sStorIOSQLite = initStorIOSQLite();
        CitiesProvider.init();
        WeatherProvider.init();
        return false;
    }

    private StorIOSQLite initStorIOSQLite() {
        return DefaultStorIOSQLite.builder().sqliteOpenHelper(sSQLiteOpenHelper)
                // *EntitySQLiteTypeMapping is autogenerated
                .addTypeMapping(CityEntity.class,
                        new CityEntitySQLiteTypeMapping())
                .addTypeMapping(CurrentWeatherEntity.class,
                        new CurrentWeatherEntitySQLiteTypeMapping())
                .addTypeMapping(DailyWeatherEntity.class,
                        new DailyWeatherEntitySQLiteTypeMapping())
                .build();
    }

    public static StorIOSQLite getStorIOSQLite() {
        return sStorIOSQLite;
    }

    public static SQLiteOpenHelper getSQLiteOpenHelper() {
        return sSQLiteOpenHelper;
    }

    @Nullable
    @Override
    public Cursor query(@NonNull Uri uri, String[] projection, String selection,
            String[] selectionArgs,
            String sortOrder) {
        switch (URI_MATCHER.match(uri)) {
            case DbContract.URI_MATCHER_CODE_CITIES:
                return sSQLiteOpenHelper.getReadableDatabase().query(CitiesTable.TABLE, projection,
                        selection, selectionArgs, null, null, sortOrder);
            case DbContract.URI_MATCHER_CODE_CURRENT_WEATHER:
                return sSQLiteOpenHelper.getReadableDatabase().query(CurrentWeatherTable.TABLE,
                        projection, selection, selectionArgs, null, null, sortOrder);
            case DbContract.URI_MATCHER_CODE_DAILY_WEATHER:
                return sSQLiteOpenHelper.getReadableDatabase().query(DailyWeatherTable.TABLE,
                        projection, selection, selectionArgs, null, null, sortOrder);
            default:
                return null;
        }
    }

    @Nullable
    @Override
    public String getType(@NonNull Uri uri) {
        return null;
    }

    @Nullable
    @Override
    public Uri insert(@NonNull Uri uri, ContentValues values) {
        final long insertedId;

        switch (URI_MATCHER.match(uri)) {
            case DbContract.URI_MATCHER_CODE_CITIES:
                insertedId = sSQLiteOpenHelper.getWritableDatabase().insert(CitiesTable.TABLE, null,
                        values);
                break;
            case DbContract.URI_MATCHER_CODE_CURRENT_WEATHER:
                insertedId = sSQLiteOpenHelper.getWritableDatabase().insert(
                        CurrentWeatherTable.TABLE, null, values);
                break;
            case DbContract.URI_MATCHER_CODE_DAILY_WEATHER:
                insertedId = sSQLiteOpenHelper.getWritableDatabase().insert(DailyWeatherTable.TABLE,
                        null, values);
                break;

            default:
                return null;
        }

        if (insertedId != -1) {
            getContext().getContentResolver().notifyChange(uri, null);
        }

        return ContentUris.withAppendedId(uri, insertedId);
    }

    @Override
    public int delete(@NonNull Uri uri, String selection, String[] selectionArgs) {
        final int numberOfRowsDeleted;

        switch (URI_MATCHER.match(uri)) {
            case DbContract.URI_MATCHER_CODE_CITIES:
                numberOfRowsDeleted = sSQLiteOpenHelper.getWritableDatabase().delete(
                        CitiesTable.TABLE, selection, selectionArgs);
                break;
            case DbContract.URI_MATCHER_CODE_CURRENT_WEATHER:
                numberOfRowsDeleted = sSQLiteOpenHelper.getWritableDatabase().delete(
                        CurrentWeatherTable.TABLE, selection, selectionArgs);
                break;
            case DbContract.URI_MATCHER_CODE_DAILY_WEATHER:
                numberOfRowsDeleted = sSQLiteOpenHelper.getWritableDatabase().delete(
                        DailyWeatherTable.TABLE, selection, selectionArgs);
                break;

            default:
                return 0;
        }

        if (numberOfRowsDeleted > 0) {
            getContext().getContentResolver().notifyChange(uri, null);
        }

        return numberOfRowsDeleted;
    }

    @Override
    public int update(@NonNull Uri uri, ContentValues values, String selection,
            String[] selectionArgs) {
        final int numberOfRowsAffected;

        switch (URI_MATCHER.match(uri)) {
            case DbContract.URI_MATCHER_CODE_CITIES:
                numberOfRowsAffected = sSQLiteOpenHelper.getWritableDatabase().update(
                        CitiesTable.TABLE, values, selection, selectionArgs);
                break;
            case DbContract.URI_MATCHER_CODE_CURRENT_WEATHER:
                numberOfRowsAffected = sSQLiteOpenHelper.getWritableDatabase().update(
                        CurrentWeatherTable.TABLE, values, selection, selectionArgs);
                break;
            case DbContract.URI_MATCHER_CODE_DAILY_WEATHER:
                numberOfRowsAffected = sSQLiteOpenHelper.getWritableDatabase().update(
                        DailyWeatherTable.TABLE, values, selection, selectionArgs);
                break;

            default:
                return 0;
        }

        if (numberOfRowsAffected > 0) {
            getContext().getContentResolver().notifyChange(uri, null);
        }

        return numberOfRowsAffected;
    }
}

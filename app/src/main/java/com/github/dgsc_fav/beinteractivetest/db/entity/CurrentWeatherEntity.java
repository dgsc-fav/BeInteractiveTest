package com.github.dgsc_fav.beinteractivetest.db.entity;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.github.dgsc_fav.beinteractivetest.db.table.CurrentWeatherTable;
import com.github.dgsc_fav.beinteractivetest.provider.meta.CurrentWeatherMeta;
import com.pushtorefresh.storio.contentresolver.annotations.StorIOContentResolverColumn;
import com.pushtorefresh.storio.contentresolver.annotations.StorIOContentResolverType;
import com.pushtorefresh.storio.sqlite.annotations.StorIOSQLiteColumn;
import com.pushtorefresh.storio.sqlite.annotations.StorIOSQLiteType;

/**
 * Created by DG on 23.10.2016.
 */
// This annotation will trigger annotation processor
// Which will generate type mapping code in compile time,
// You just need to link it in your code.
@StorIOSQLiteType(table = CurrentWeatherTable.TABLE)
@StorIOContentResolverType(uri = CurrentWeatherMeta.URI_STRING)
public class CurrentWeatherEntity {
    /**
     * If object was not inserted into db, id will be null
     */
    @Nullable
    @StorIOSQLiteColumn(name = CurrentWeatherTable.COLUMN_ID, key = true)
    @StorIOContentResolverColumn(name = CurrentWeatherTable.COLUMN_ID, key = true)
    Long id;

    @Nullable
    @StorIOSQLiteColumn(name = CurrentWeatherTable.COLUMN_TIMESTAMP)
    @StorIOContentResolverColumn(name = CurrentWeatherTable.COLUMN_TIMESTAMP)
    Long timestamp;

    @NonNull
    @StorIOSQLiteColumn(name = CurrentWeatherTable.COLUMN_CACHE_KEY)
    @StorIOContentResolverColumn(name = CurrentWeatherTable.COLUMN_CACHE_KEY)
    String cacheKey;

    @NonNull
    @StorIOSQLiteColumn(name = CurrentWeatherTable.COLUMN_CONTENT)
    @StorIOContentResolverColumn(name = CurrentWeatherTable.COLUMN_CONTENT)
    String content;


    // leave default constructor for AutoGenerated code!
    CurrentWeatherEntity() {
    }

    private CurrentWeatherEntity(@Nullable Long id, @NonNull Long timestamp, @NonNull String cacheKey,
            @NonNull String content) {
        this.id = id;
        this.timestamp = timestamp;
        this.cacheKey = cacheKey;
        this.content = content;
    }

    @NonNull
    public static CurrentWeatherEntity newCurrentWeather(@Nullable Long id, @NonNull Long timestamp,
            @NonNull String cacheKey, @NonNull String content) {
        return new CurrentWeatherEntity(id, timestamp, cacheKey, content);
    }

    @NonNull
    public static CurrentWeatherEntity newCurrentWeather(@NonNull Long timestamp,
            @NonNull String cacheKey, @NonNull String content) {
        return new CurrentWeatherEntity(null, timestamp, cacheKey, content);
    }

    @Nullable
    public Long id() {
        return id;
    }

    @NonNull
    public Long timestamp() {
        return timestamp;
    }

    @NonNull
    public String cacheKey() {
        return cacheKey;
    }

    @NonNull
    public String content() {
        return content;
    }

    // // TODO: 23.10.2016 разобраться с валидностью метода
    // BTW, you can use AutoValue/AutoParcel to get immutability and code generation for free
    // Check our tests, we have examples!
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        CurrentWeatherEntity cityEntity = (CurrentWeatherEntity) o;

        if (id != null ? !id.equals(cityEntity.id) : cityEntity.id != null) {
            return false;
        }
        return this.content.equals(cityEntity.content);
    }

    @Override
    public int hashCode() {
        int result = id != null ? id.hashCode() : 0;
        result = 31 * result + content.hashCode();
        return result;
    }

    @Override
    public String toString() {
        return "CurrentWeather{" +
                "id=" + id +
                ", timestamp='" + timestamp + '\'' +
                ", cacheKey='" + cacheKey + '\'' +
                ", content='" + content + '\'' +
                '}';
    }
}
